x=seq(-2,2,0.1)
y=x^2
plot(x,y,col='skyblue',type='l')
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
n <- 1000000
samples = sample(c(0,1), replace=TRUE, size=n)
for (i in 1:n){
prob <- sum(samples[1:i])/i
}
paste(length(which(prob==0.5)), "out of", n, sep=" ")
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
source('~/Books/Startistics/Doing Bayesian Data Analysis/chapter3.R', echo=TRUE)
library(ggplot2)
library(sjPlot)
predation_data = read.csv('insectPredation.csv')
predation_data['logPredation'] = log(predation_data['meanNoAttacksPerDay'])
print(head(predation_data))
ggplot(predation_data, aes(x=meanAbsoluteLatitude, y=logPredation)) +
geom_point() + theme_classic()+
xlab("Mean absolute latitude") +
ylab("Log mean number of attacks")
ggplot(predation_data, aes(x=meanElevation, y=logPredation)) +
geom_point() + theme_classic() +
xlab("Mean elevation") +
ylab("Log mean number of attacks")
predation_model = lm(logPredation ~ meanAbsoluteLatitude + meanElevation + meanAbsoluteLatitude * meanElevation, data = predation_data)
summary(predation_model)
plot_model(predation_model, type = "pred", terms = "meanAbsoluteLatitude", show.data = TRUE, title = "") +
theme_classic() +
xlab("Mean absolute latitude") +
ylab("Log mean number of attacks")
plot_model(predation_model, type = "pred", terms = "meanElevation", show.data = TRUE, title = "") +
theme_classic() +
xlab("Mean elevation") +
ylab("Log mean number of attacks")
ggplot(predation_model, aes(sample = .resid)) +
geom_qq_line()+
geom_qq() +
theme_classic()
ggplot(predation_model, aes(x = .fitted, y = .resid)) +
geom_point(size = 3) +
geom_hline(yintercept = 0) +
theme_classic() +
geom_smooth(method=lm) +
ylab("Model residuals") +
xlab("Fitted values")
shapiro.test(predation_model$residuals)
library(ggplot2)
library(sjPlot)
predation_data = read.csv('insectPredation.csv')
predation_data['logPredation'] = log(predation_data['meanNoAttacksPerDay'])
print(head(predation_data))
ggplot(predation_data, aes(x=meanAbsoluteLatitude, y=logPredation)) +
geom_point() + theme_classic()+
xlab("Mean absolute latitude") +
ylab("Log mean number of attacks")
ggplot(predation_data, aes(x=meanElevation, y=logPredation)) +
geom_point() + theme_classic() +
xlab("Mean elevation") +
ylab("Log mean number of attacks")
predation_model = lm(logPredation ~ meanAbsoluteLatitude + meanElevation + meanAbsoluteLatitude * meanElevation, data = predation_data)
summary(predation_model)
plot_model(predation_model, type = "pred", terms = "meanAbsoluteLatitude", show.data = TRUE, title = "") +
theme_classic() +
xlab("Mean absolute latitude") +
ylab("Log mean number of attacks")
plot_model(predation_model, type = "pred", terms = "meanElevation", show.data = TRUE, title = "") +
theme_classic() +
xlab("Mean elevation") +
ylab("Log mean number of attacks")
ggplot(predation_model, aes(sample = .resid)) +
geom_qq_line()+
geom_qq() +
theme_classic()
ggplot(predation_model, aes(x = .fitted, y = .resid)) +
geom_point(size = 3) +
geom_hline(yintercept = 0) +
theme_classic() +
geom_smooth(method=lm) +
ylab("Model residuals") +
xlab("Fitted values")
shapiro.test(predation_model$residuals)
plot_model(predation_model, type = "int", show.data = TRUE, mdrt.values = "quart", legend.title = "Weight (g)") +
theme_classic() +
scale_x_continuous(expand = c(0, 0), name = "Snout-vent length (mm)") +
ylab("Speed (cm/sec)")
View(predation_data)
plot_model(predation_model, type = "int", show.data = TRUE, mdrt.values = "quart", legend.title = "Mean elevation (m)") +
theme_classic() +
scale_x_continuous(expand = c(0, 0), name = "Snout-vent length (mm)") +
ylab("Speed (cm/sec)")
plot_model(predation_model, type = "int", show.data = TRUE, mdrt.values = "quart", legend.title = "Mean elevation (m)") +
theme_classic() +
scale_x_continuous(expand = c(0, 0), name = "Mean absolute latitude") +
ylab("Speed (cm/sec)")
plot_model(predation_model, type = "int", show.data = TRUE, mdrt.values = "quart", legend.title = "Mean elevation (m)") +
theme_classic() +
scale_x_continuous(expand = c(0, 0), name = "Mean absolute latitude") +
ylab("Log predation")
graphics.off()
source('~/Books/Statistics/Doing Bayesian Data Analysis/DBDA2Eprograms/BernMetrop.R', echo=TRUE)
install.packages("rjags")
iinstall.packages('runjags')
install.packages('runjags')
library(iNextPD)
library(ggplot2)
library(ade4)
haplotype_comm = read.csv('haplotype_comp.csv', row.names = 1)
newick_tree = paste(readLines("../alignment/raxml-ng/support.raxml.support"), collapse="")
phylogeny = newick2phylog(newick_tree)
haplotype.lab <- rownames(haplotype_comm)
library(iNextPD)
library(ggplot2)
library(ade4)
R.version
library(iNextPD2)
install.packages("remotes")
remotes::install_github("YanHanChen/iNEXTPD2")
library(iNextPD2)
install.packages("remotes")
remotes::install_github("YanHanChen/iNEXTPD2")
remotes::install_github("YanHanChen/iNEXTPD2")
remotes::install_github("YanHanChen/iNEXTPD2")
library("rstudioapi")
library("iNEXT")
setwd(dirname(getActiveDocumentContext()$path))
# Import and rearrange data ----------------------------------------------------
raw_data = read.csv('../output/species_id_updated.csv')[ , -1]
for (i in 1:nrow(raw_data)){
if (raw_data[i,3] == "Crassostrea"){
raw_data[i,3] = "Magallana"
}
}
raw_data['Binomial'] = paste(raw_data$Genus, raw_data$Species)
species = as.list(unique(raw_data['Binomial']))
sites = as.list(unique(raw_data['Site']))
species_comp = matrix(0, nrow = lengths(species), ncol = lengths(sites))
colnames(species_comp) = unlist(sites)
rownames(species_comp) = sort(unlist(species))
for (site in colnames(species_comp)){
for (species in rownames(species_comp)){
species_comp[species, site] = dim(raw_data[raw_data$Site == site & raw_data$Binomial == species,])[1]
}
}
write.csv(species_comp, "../output/species_matrix.csv")
diversity_est = iNEXT(species_comp, q = c(0,1,2))
ggiNEXT(out, facet.var = "Assemblage")
ggiNEXT(diversity_est, facet.var = "Assemblage")
chisq.test(species_comp)
library('vegan')
vegdist(species_comp)
vegdist(species_comp.t())
vegdist(species_comp.t)
vegdist(t(species_comp))
vegdist(t(species_comp), method='chisq')
species_rda = rda(species_comp)
View(species_rda)
biplot(species_rda)
species_rda = rda(t(species_comp))
biplot(species_rda)
library("rstudioapi")
library("iNEXT")
library('vegan')
setwd(dirname(getActiveDocumentContext()$path))
# Import and rearrange data ----------------------------------------------------
raw_data = read.csv('../output/species_id_updated.csv')[ , -1]
for (i in 1:nrow(raw_data)){
if (raw_data[i,3] == "Crassostrea"){
raw_data[i,3] = "Magallana"
}
}
raw_data['Binomial'] = paste(raw_data$Genus, raw_data$Species)
species = as.list(unique(raw_data['Binomial']))
sites = as.list(unique(raw_data['Site']))
species_comp = matrix(0, nrow = lengths(species), ncol = lengths(sites))
colnames(species_comp) = unlist(sites)
rownames(species_comp) = sort(unlist(species))
for (site in colnames(species_comp)){
for (species in rownames(species_comp)){
species_comp[species, site] = dim(raw_data[raw_data$Site == site & raw_data$Binomial == species,])[1]
}
}
write.csv(species_comp, "../output/species_matrix.csv")
# Alpha diversity --------------------------------------------------------------
diversity_est = iNEXT(species_comp, q = c(0,1,2))
ggiNEXT(diversity_est, facet.var = "Assemblage")
vegdist(t(species_comp), method='bray')
species_dist = vegdist(t(species_comp), method='bray')
ordiplot(species_dist)
ordiplot(species_dist, display = 'sites')
ordiplot(species_dist, display = 'sites', type='text')
ordiplot(species_dist, type='text')
species_dist
library("ape")
install.packages('ape')
library("ape")
pcoa(species_dist)
biplot(pcoa(species_dist))
biplot(pcoa(species_dist, scale(=TRUE)))
setwd(dirname(getActiveDocumentContext()$path))
library(ggfortify)
install.packages('ggfortify')
library('ggfortify')
pca_res <- prcomp(species_comp, scale. = TRUE)
autoplot(pca_res, data=species_comp, colour='Site')
autoplot(pca_res, data=species_comp, colour='site')
autoplot(pca_res, data=species_comp, colour='Sites')
autoplot(pca_res, data=species_comp)
pca_res
pca_res
species_comp
data("iris")
force(iris)
species_comp.rownames
species_comp.rowname
rownames(species_comp)
autoplot(pca_res, data=species_comp, colour=rownames(species_comp) )
library('ggplot')
library('ggplot2')
library('dplyr')
pca_res
library('vegan')
vegdist(t(species_comp),method="bray")
species_bray = vegdist(t(species_comp),method="bray")
library('ape')
pcoa(species_bray)
species_pcoa = pcoa(species_bray)
biplot(species_pcoa)
biplot(species_pcoa, dir.axis1=-1, dir.axis2=-1)
species_log = log(species_comp)
species_log
species_log = log(species_comp+1)
species_log
species_bray = vegdist(t(species_log),method="bray")
species_pcoa = pcoa(species_bray)
biplot(species_pcoa)
pcoa_plot = biplot(species_pcoa)
species_pcoa
library('ggfortify')
autoplot(species_pcoa)
library('ggrepel')
install.packages('ggrepel')
library('ggrepel')
biplot(species_pcoa)
chisq.test(species_comp)
library("rstudioapi")
library("iNEXT")
setwd(dirname(getActiveDocumentContext()$path))
# Import and rearrange data ----------------------------------------------------
raw_data = read.csv('../output/species_id_updated.csv')[ , -1]
for (i in 1:nrow(raw_data)){
if (raw_data[i,3] == "Crassostrea"){
raw_data[i,3] = "Magallana"
}
}
raw_data['Binomial'] = paste(raw_data$Genus, raw_data$Species)
species = as.list(unique(raw_data['Binomial']))
sites = as.list(unique(raw_data['Site']))
species_comp = matrix(0, nrow = lengths(species), ncol = lengths(sites))
colnames(species_comp) = unlist(sites)
rownames(species_comp) = sort(unlist(species))
for (site in colnames(species_comp)){
for (species in rownames(species_comp)){
species_comp[species, site] = dim(raw_data[raw_data$Site == site & raw_data$Binomial == species,])[1]
}
}
write.csv(species_comp, "../output/species_matrix.csv")
# Sample coverage esit --------------------------------------------------------------
diversity_est = iNEXT(species_comp, q = c(0,1,2))
ggiNEXT(diversity_est, facet.var = "Assemblage")
# Beta diversity ---------------------------------------------------------------
chisq.test(species_comp)
ggiNEXT(diversity_est, type=2, facet.var = "Assemblage")
chisq.test(species_comp)
chisq.test(species_comp, simulate.p.value = TRUE)
library('ggplot2')
species_comp
ggplot(data = species_comp)
as.data.frame(species_comp)
ggplot(data = as.data.frame(species_comp))
ggplot(data = as.data.frame(species_comp))+
#aes(x = DCScat, fill = TobaccoDependence)) +
geom_bar(position = "fill") +
theme_bw() +
#labs(x= "Daily Smoking Frequency", y = "Fraction") +
guides(fill = guide_legend(reverse = TRUE))
as.data.frame(species_comp)
raw_data
ggplot(data = raw_data)+
aes(x = 'Site', fill = 'Binomial' )) +
ggplot(data = raw_data)+
aes(x = 'Site', fill = 'Binomial' ) +
geom_bar(position = "fill") +
theme_bw() +
#labs(x= "Daily Smoking Frequency", y = "Fraction") +
guides(fill = guide_legend(reverse = TRUE))
ggplot(data = raw_data)+
aes(x =Site, fill = 'Binomial' ) +
geom_bar(position = "fill") +
theme_bw() +
#labs(x= "Daily Smoking Frequency", y = "Fraction") +
guides(fill = guide_legend(reverse = TRUE))
ggplot(data = raw_data)+
aes(x =Site, fill = Binomial ) +
geom_bar(position = "fill") +
theme_bw() +
#labs(x= "Daily Smoking Frequency", y = "Fraction") +
guides(fill = guide_legend(reverse = TRUE))
